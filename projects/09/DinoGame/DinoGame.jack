/**
 * implements a simplified version of the chromium dino game.
 * The player controls a 16x16 dino that must jump over cacti to survive.
 * To jump, press space
 */

class DinoGame {

	static DinoGame instance;
 	field Dino dino;
	field int score;
	field int airtime;
	field boolean jump;
	field boolean exit;
	field Array cactarray;
	field int numCact;
	field int cactimer;
	field int cactindex;
	field int nextCact;
	field Cactus currentCact;
	field int cactimer1;
	field int cactimer2;
	field int cactimer3;
	static int _lastNum;
	static int PSEUDA_RAND_MULTIPLIER;
	static int PSEUDA_RAND_ADDER;
	static int MAX_DIST;

	/** Constructs a new Dino game */
	constructor DinoGame new() {
		do Screen.clearScreen();
		do Output.moveCursor(0, 58);
		do Output.printString("00000");
		let cactarray = Array.new(3);
		let dino = Dino.new(10, 220);
		let airtime = 0;
		let nextCact = 0;
		let numCact = 0;
		let score = 0;
		let jump = false;
		let exit = false;
		do Screen.drawRectangle(0, 238, 511, 255);
		let cactimer = 30;
		let cactimer1 = 50;
		let cactimer2 = 60;
		let cactimer3 = 70;
		let _lastNum = 17394;
		let PSEUDA_RAND_MULTIPLIER = 91;
		let PSEUDA_RAND_ADDER = 1;
		let MAX_DIST = 16354;
		return this;
	}

	/** disposes this game */
	method void dispose() {
		do dino.dispose();
		do cactarray.dispose();
		do Memory.deAlloc(this);
		return;
	}

	/** Creates an instance of the Dino game and stores it */
	function void newInstance() {
		let instance = DinoGame.new();
		return;
	}

	/** returns the single instance of this dino game */
	function DinoGame getInstance() {
		return instance;
	}

	/** runs the game: handles the user's inputs and moves the dino accordingly */
	method void run() {
		var char key; // the key currently pressed by the user
		while (~exit) {
			// waits for a key to be pressed
			while ((key = 0) & (~exit)) {
				let key = Keyboard.keyPressed();
				if (jump) {
					do moveDino();
				}
				do updateCacti();
				do updateScore();
				do Sys.wait(30);
			}

			if (key = 81) { let exit = true; }	// q key
			if (key = 32) { let jump = true; }	// space key

			// waits for the key to be released
			while (~(key = 0) & (~exit)) {
				let key = Keyboard.keyPressed();
				if (jump) {
					do moveDino();
				}
				do updateCacti();
				do updateScore();
				do Sys.wait(30);
			}
		}

		if (exit) {
			do Output.moveCursor(10,27);
			do Output.printString("GAME OVER");
		}

		return;
	}

	/** handles all dino movement */
	method void moveDino() {
		if (airtime < 5) { do dino.moveUp(); }
		else { do dino.moveDown(); }
		if (airtime = 9) {
			let airtime = 0;
			let jump = false;
		}
		else { let airtime = airtime + 1; }
		return;
	}

	/** moves, adds, and removes cacti */
	method void updateCacti() {
		var int movecounter;
		let movecounter = 0;
		/* makes sure there are up to five cacti at a time with a minium of 30
		 * calls of this function in between. whether or not a cactus is actually
		 * created is supposed to be relatively random
		 */
		// first iterates thru the array to see if there are any empty cacti slots

		let cactindex = 2;
		
		while (~(cactindex < 0)) {
			if (cactarray[cactindex] = false) {
				let nextCact = cactindex;
			}
			let cactindex = cactindex - 1;
		}
		// the first 30 times, this will be skipped because cactimer is more than 0
		// if there are less than five cacti and the cactimer is 0, creates a new cactus,
		// adds one to numcact to reflect the number of cacti, and resets the cactimer
		if ((numCact < 5) & (cactimer = 0)) {
			let cactarray[nextCact] = Cactus.new(1);
			let numCact = numCact + 1;
			while (cactimer < 10) {
				let cactimer = DinoGame.random();
			}
		}
		// otherwise, decrements the cactimer
		else { let cactimer = cactimer - 1; }

		// used as the index for the following while loop. set to the number of cacti minus one since
		// machines count starting from 0
		let cactindex = 2;

		while (~(cactindex < 0)) {
			let currentCact = cactarray[cactindex];
			// checks if there is a cactus at the current position
			if (currentCact) {
				do currentCact.moveLeft();
				let movecounter = movecounter + 1;
				// checks if the cactus is touching the dino
				if ((currentCact.checkTouch()) & (dino.getLocation() > 6560)) {
						let exit = true;
				}
				// checks if the cactus is touching the edge of the screen
				if (currentCact.checkEdge() = true) {
					do currentCact.dispose();
					let cactarray[cactindex] = false;
					let numCact = numCact - 1;
				}
			}
			let cactindex = cactindex - 1;
		}
		do Output.moveCursor(0,0);
		do Output.printInt(movecounter);
		return;
	}
	

	function boolean checkCleanDiv(int numerator, int denominator) {
		var int quotient;
		var int product;
		let quotient = numerator / denominator;
		let product = quotient * denominator;
		if (product = numerator) { return true; }
		else { return false; }
	}

	method void updateScore() {
		var int cursor_j;
		var int numlen;
		if (score < 10) { let numlen = 1; } 
		else {
			if (score < 100) { let numlen = 2; } 
			else {
				if (score < 1000) { let numlen = 3; } 
				else {
					if (score < 10000) { let numlen = 4; } 
					else { let score = 0; let numlen = 1; }
				}
			}
		}
		let cursor_j = (64 - numlen);
		do Output.moveCursor(0,cursor_j);
		do Output.printInt(score);
		let score = score + 1;
		return;
	}

	function int random() {
		var int res;
		let res = Utils.modulo(_lastNum, 30);
		let _lastNum = (_lastNum * PSEUDA_RAND_MULTIPLIER) + PSEUDA_RAND_ADDER;
		let _lastNum = Utils.moduloPower2(_lastNum, 1024);
		return res + 10;
	}
}
