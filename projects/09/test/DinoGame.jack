/**
 * implements a simplified version of the chromium dino game.
 * The player controls a 16x16 dino that must jump over cacti to survive.
 * To jump, press space
 */

class DinoGame {

 	field Dino dino;
	field int score;
	field int airtime;
	field boolean jump;

	/** Constructs a new Dino game */
	constructor DinoGame new() {
		do Screen.clearScreen();
		do Output.moveCursor(0,63);
		do Output.printString("00000");
		let dino = Dino.new(20, 20);
		let airtime = 0;
		return this;
	}

	/** disposes this game */
	method void dispose() {
		do dino.dispose();
		do Memory.deAlloc(this);
		return;
	}

	/** runs the game: handles the user's inputs and moves the dino accordingly */
	method void run() {
		var char key; // the key currently pressed by the user
		var boolean exit;
		var boolean dead;
		let exit = false;
		let exit = false;

		while (~exit) {
			// waits for a key to be pressed
			while ((key = 0) & (~exit)) {
				let key = Keyboard.keyPressed();
				if (jump) {
					do moveDino();
					// if (airtime > 18) { let airtime = airtime + 1; }
					// else {
					// 	let airtime = 0;
					// 	let jump = false;
					// }
				}
				// do cactus.move();
				do Sys.wait(50);
			}

			if (key = 81) { let exit = true; }	// q key
			if (key = 32) { let jump = true; }	// space key

			// waits for the key to be released
			while (~(key = 0) & (~exit)) {
				let key = Keyboard.keyPressed();
				if (jump) {
					do moveDino();
					// if (airtime < 18) { let airtime = airtime + 1; }
					// else {
					// 	let airtime = 0;
					// 	let jump = false;
					// }
				}
				// do cactus.move();
				do Sys.wait(50);
			}
		} // while

		do Output.printString("GAME OVER");
		return;

	}

	/** handles all dino movement */
	method void moveDino() {
		if (airtime < 10) { do dino.moveUp(); }
		else { do dino.moveDown(); }
		if (airtime = 18) {
			let airtime = 0;
			let jump = false;
		}
		else { let airtime = airtime + 1; }
		return;
	}

	function boolean checkCleanDiv(int numerator, int denominator) {
		var int quotient;
		var int product;
		let quotient = numerator / denominator;
		let product = quotient * denominator;
		if (product = numerator) { return true; }
		else { return false; }
	}

	method void updateScore() {
		var int cursor_j;
		var int numlen;
		if (score < 10) { let numlen = 1; } 
		else {
			if (score < 100) { let numlen = 2; } 
			else {
				if (score < 1000) { let numlen = 3; } 
				else {
					if (score < 10000) { let numlen = 4; } 
					else {
						let score = 0;
						let numlen = 1;
					}
				}
			}
		}

		let cursor_j = (64 - numlen);
		do Output.moveCursor(0,63);         
		do Output.printString("00000");
		do Output.moveCursor(0,cursor_j);
		do Output.printInt(score);
		return;

	}

	method boolean rand(int num, int address) {
		var boolean randout;
		var int memcontent;
		var boolean divClean;
		let memcontent = Memory.peek(address); // arbitrary memory location
		let randout = DinoGame.checkCleanDiv(
		memcontent * score + 595 * Math.sqrt(memcontent) * 5, num);
		return randout;
	}
}
